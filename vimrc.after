
set t_Co=256
colorscheme blackboardish
let g:NERDTreeWinPos = "right"

syntax on

set smartindent
set modeline
set tabstop=4
set shiftwidth=4
set expandtab
set foldlevelstart=20

set title
set showmode
set scrolloff=15

" Color column
set colorcolumn=80
"let &colorcolumn="80,".join(range(120,999),",")
highlight ColorColumn ctermbg=234

let &winwidth = 81

" Hilight current line
set cursorline
highlight CursorLine ctermbg=235

set laststatus=2
set bs=eol,start,indent " Backspace config
set ruler " Show current position

" bells are annoying
set noerrorbells visualbell t_vb=
" Allow mouse mode
set mouse=nv

" Hybrid number/relative mode in Vim 7.4
set number
set relativenumber

" Don't highlight keywords on search
set nohlsearch

" Splits open to the right and below
set splitright
set splitbelow

" autoreload .vimrc
autocmd BufWritePost .vimrc sourceÂ %

" vim Gist stuff
let g:gist_detect_filetype = 1

" GUI font
set guifont=DejaVu\ Sans\ Mono\ for\ Powerline:h13

" Custom mapping for tabedit -> Te
command! -complete=file -nargs=1 Te tabedit <args>

" Load .vimrc in the base directory of a git repo, if it exists
let $git_vimrc= expand(system("echo -n $(git rev-parse --show-toplevel)/.vimrc"))
if filereadable($git_vimrc) && $git_vimrc != expand("$HOME/.vimrc")
    source $git_vimrc
endif

" --- Syntastic Things ---
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

" let g:syntastic_reuse_loc_lists = 0
" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0

let g:syntastic_mode_map = {
       \'mode': 'passive',
       \ 'active_filetypes': ['ruby', 'python', 'go', 'javascript', 'cs'],
       \ 'passive_filetypes': ['ruby', 'python', 'go', 'javascript'], }


" Disable go build for syntastic
let g:syntastic_go_checkers = ['gofmt']

" Disable syntax checking for arduino
" let g:syntastic_arduino_checkers = []
let g:syntastic_arduino_checkers = ['avrgcc']
let g:syntastic_arduino_avrgcc_quiet_messages = { "level": "errors",
                                                \ "type": "style",
                                                \ "regex": "",
                                                \ "file": "\m\c\.ino$" }

" Enable rubocop for Ruby checkers
let g:syntastic_ruby_checkers = ['rubocop', 'mri']

" Only jshint for JavaScript
let g:syntastic_javascript_checkers = ['jshint']

" C checkers: GCC and oclint
let g:syntastic_c_checkers = ['gcc', 'oclint']
" C++ checkers: GCC and oclint
let g:syntastic_cpp_checkers = ['gcc', 'oclint']

let g:syntastic_cs_checkers = ['code_checker']

let g:syntastic_ignore_files = [
\ 'schema.rb$',
\ 'Gemfile$',
\ ]


" --- CtrlP Things ---

let g:ctrlp_show_hidden = 1
let g:ctrlp_regexp = 1
let g:ctrlp_abbrev = {
\ 'gmode': 'i',
\ 'abbrevs': [
  \ {
    \ 'pattern': '\(^@.\+\|\\\@<!:.\+\)\@<! ',
    \ 'expanded': '.\{-}',
    \ 'mode': 'pfrz',
  \ },
  \ ]
\ }

if executable('ag')
  " Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
  set grepprg=ag\ --nogroup\ --nocolor
  " Use ag in CtrlP for listing files. Lightning fast, respects .gitignore
  " and .agignore. Ignores hidden files by default.
  let g:ctrlp_user_command = 'ag %s -l --hidden --ignore .git --nocolor -f -g ""'
else
  "ctrl+p ignore files in .gitignore
  let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . -co --exclude-standard', 'find %s -type f']
endif

" --- SuperTab config ---

set completeopt=longest,menuone
autocmd FileType *
			\ if &omnifunc != '' |
			\   call SuperTabChain(&omnifunc, "<c-p>") |
			\ endif

" let g:SuperTabCompletionContexts = ['s:ContextText', 's:ContextDiscover']
" let g:SuperTabContextTextOmniPrecedence = ['&omnifunc', '&completefunc']
" let g:SuperTabContextDiscoverDiscovery =
" 			\ ["&completefunc:<c-x><c-u>", "&omnifunc:<c-x><c-o>"]


" --- OmniSharp config ---

let g:OmniSharp_highlight_types = 1
augroup omnisharp_commands
	autocmd!

	au FileType cs OmniSharpHighlightTypes

    " When Syntastic is available but not ALE, automatic syntax check on events
    " (TextChanged requires Vim 7.4)
    " autocmd BufEnter,TextChanged,InsertLeave *.cs SyntasticCheck
	autocmd BufWritePost *.cs SyntasticCheck

    " Show type information automatically when the cursor stops moving
    autocmd CursorHold *.cs call OmniSharp#TypeLookupWithoutDocumentation()

    " Update the highlighting whenever leaving insert mode
    autocmd InsertLeave *.cs call OmniSharp#HighlightBuffer()

    " Alternatively, use a mapping to refresh highlighting for the current buffer
    autocmd FileType cs nnoremap <buffer> <Leader>th :OmniSharpHighlightTypes<CR>

    " The following commands are contextual, based on the cursor position.
    autocmd FileType cs nnoremap <buffer> gd :OmniSharpGotoDefinition<CR>
    autocmd FileType cs nnoremap <buffer> <Leader>fi :OmniSharpFindImplementations<CR>
    autocmd FileType cs nnoremap <buffer> <Leader>fs :OmniSharpFindSymbol<CR>
    autocmd FileType cs nnoremap <buffer> <Leader>fu :OmniSharpFindUsages<CR>

    autocmd FileType cs nnoremap <buffer> <Leader>fx :OmniSharpFixUsings<CR>
    autocmd FileType cs nnoremap <buffer> <Leader>tt :OmniSharpTypeLookup<CR>

    autocmd FileType cs setlocal cinoptions=j1,{0,(0,ws,Ws

    " Contextual code actions (uses fzf, CtrlP or unite.vim when available)
    autocmd FileType cs nnoremap <Leader><Space> :OmniSharpGetCodeActions<CR>
    " Run code actions with text selected in visual mode to extract method
    autocmd FileType cs xnoremap <Leader><Space> :call OmniSharp#GetCodeActions('visual')<CR>

    " Rename with dialog
    autocmd FileType cs nnoremap <Leader>nm :OmniSharpRename<CR>
    " Rename without dialog - with cursor on the symbol to rename: `:Rename newname`
    autocmd FileType cs command! -nargs=1 Rename :call OmniSharp#RenameTo("<args>")

    autocmd FileType cs nnoremap <Leader>ff :OmniSharpCodeFormat<CR>

    " Start the omnisharp server for the current solution
    autocmd FileType cs nnoremap <Leader>ss :OmniSharpStartServer<CR>
    autocmd FileType cs nnoremap <Leader>st :OmniSharpStopServer<CR>
augroup end


" --- incsearch ---
" :h g:incsearch#auto_nohlsearch

set hlsearch
let g:incsearch#auto_nohlsearch = 1
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)


" --- Misc Things ---

" Use the_silver_searcher if available
if executable('ag')
  let g:ackprg = 'ag --nogroup --nocolor --column'
endif

let g:slime_paste_file = "$HOME/.slime_paste"
let g:slime_target = "tmux"

let g:airline_extensions = []

let g:indent_guides_auto_colors = 0
let g:indent_guides_guide_size = 1
" hi IndentGuidesOdd  ctermbg=black
hi IndentGuidesEven ctermbg=233

" https://jordanelver.co.uk/blog/2015/05/27/working-with-vim-colorschemes/
nmap <leader>sp :call <SID>SynStack()<CR>
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc


"Disable arrow keys
inoremap  <Up>     <NOP>
inoremap  <Down>   <NOP>
inoremap  <Left>   <NOP>
inoremap  <Right>  <NOP>
nnoremap   <Up>     <NOP>
nnoremap   <Down>   <NOP>
nnoremap   <Left>   <NOP>
nnoremap   <Right>  <NOP>
vnoremap   <Up>     <NOP>
vnoremap   <Down>   <NOP>
vnoremap   <Left>   <NOP>
vnoremap   <Right>  <NOP>
noremap   <Up>     <NOP>
noremap   <Down>   <NOP>
noremap   <Left>   <NOP>
noremap   <Right>  <NOP>

